(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{537:function(t,i,v){"use strict";v.r(i);var _=v(25),e=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"主题六：版本控制-git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主题六：版本控制-git"}},[t._v("#")]),t._v(" 主题六：版本控制 (Git)")]),t._v(" "),v("blockquote",[v("p",[t._v("Git 比较熟悉了，不写太多了，自己建几个仓库多尝试尝试就会了。")])]),t._v(" "),v("p",[t._v("git 每一个版本被称为快照。历史记录则由快照组成。")]),t._v(" "),v("blockquote",[v("p",[t._v("Git 在储存数据时，所有的对象都会基于它们的SHA-1 hash进行寻址。")])]),t._v(" "),v("p",[t._v("提交标志采用哈希值，但是不易读。于是添加了引用，方便阅读。引用可以被更新，指向新的提交。")]),t._v(" "),v("p",[t._v("基础")]),t._v(" "),v("ul",[v("li",[t._v("git help "),v("command",[t._v(": 获取 git 命令的帮助信息")])],1),t._v(" "),v("li",[t._v("git init: 创建一个新的 git 仓库，其数据会存放在一个名为 .git 的目录下")]),t._v(" "),v("li",[t._v("git status: 显示当前的仓库状态")]),t._v(" "),v("li",[t._v("git add "),v("filename",[t._v(": 添加文件到暂存区")])],1),t._v(" "),v("li",[t._v("git commit: 创建一个新的提交\n"),v("ul",[v("li",[v("a",{attrs:{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何编写 良好的提交信息!"),v("OutboundLink")],1)])])]),t._v(" "),v("li",[t._v("git log: 显示历史日志")]),t._v(" "),v("li",[t._v("git log --all --graph --decorate: 可视化历史记录（有向无环图）")]),t._v(" "),v("li",[t._v("git diff "),v("filename",[t._v(": 显示与上一次提交之间的差异")])],1),t._v(" "),v("li",[t._v("git diff "),v("revision",[v("filename",[t._v(": 显示某个文件两个版本之间的差异")])],1)],1),t._v(" "),v("li",[t._v("git checkout "),v("revision",[t._v(": 更新 HEAD 和目前的分支")])],1)]),t._v(" "),v("p",[t._v("分支和合并")]),t._v(" "),v("ul",[v("li",[t._v("git branch: 显示分支")]),t._v(" "),v("li",[t._v("git branch "),v("name",[t._v(": 创建分支")])],1),t._v(" "),v("li",[t._v("git checkout -b "),v("name",[t._v(": 创建分支并切换到该分支\n"),v("ul",[v("li",[t._v("相当于 git branch "),v("name",[t._v("; git checkout "),v("name")],1)],1)])])],1),t._v(" "),v("li",[t._v("git merge "),v("revision",[t._v(": 合并到当前分支")])],1),t._v(" "),v("li",[t._v("git mergetool: 使用工具来处理合并冲突")]),t._v(" "),v("li",[t._v("git rebase: 将一系列补丁变基（rebase）为新的基线")])]),t._v(" "),v("p",[t._v("远端操作")]),t._v(" "),v("ul",[v("li",[t._v("git remote: 列出远端")]),t._v(" "),v("li",[t._v("git remote add "),v("name",[v("url",[t._v(": 添加一个远端")])],1)],1),t._v(" "),v("li",[t._v("git push "),v("remote",[v("local",{attrs:{branch:""}},[t._v(":"),v("remote",{attrs:{branch:""}},[t._v(": 将对象传送至远端并更新远端引用")])],1)],1)],1),t._v(" "),v("li",[t._v("git branch --set-upstream-to="),v("remote",[t._v("/"),v("remote",{attrs:{branch:""}},[t._v(": 创建本地和远端分支的关联关系")])],1)],1),t._v(" "),v("li",[t._v("git fetch: 从远端获取对象/索引")]),t._v(" "),v("li",[t._v("git pull: 相当于 git fetch; git merge")]),t._v(" "),v("li",[t._v("git clone: 从远端下载仓库")])]),t._v(" "),v("p",[t._v("撤销")]),t._v(" "),v("ul",[v("li",[t._v("git commit --amend: 编辑提交的内容或信息")]),t._v(" "),v("li",[t._v("git reset HEAD "),v("file",[t._v(": 恢复暂存的文件")])],1),t._v(" "),v("li",[t._v("git checkout -- "),v("file",[t._v(": 丢弃修改")])],1)]),t._v(" "),v("p",[t._v("Git 高级操作")]),t._v(" "),v("ul",[v("li",[t._v("git config: Git 是一个 高度可定制的 工具")]),t._v(" "),v("li",[t._v("git clone --shallow: 克隆仓库，但是不包括版本历史信息")]),t._v(" "),v("li",[t._v("git add -p: 交互式暂存")]),t._v(" "),v("li",[t._v("git rebase -i: 交互式变基")]),t._v(" "),v("li",[t._v("git blame: 查看最后修改某行的人")]),t._v(" "),v("li",[t._v("git stash: 暂时移除工作目录下的修改内容")]),t._v(" "),v("li",[t._v("git bisect: 通过二分查找搜索历史记录")]),t._v(" "),v("li",[t._v(".gitignore: 指定 故意不追踪的文件")])]),t._v(" "),v("p",[t._v("资源很多，我只推荐这一个 ： "),v("a",{attrs:{href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"}},[t._v("learngitbranching"),v("OutboundLink")],1)])])}),[],!1,null,null,null);i.default=e.exports}}]);