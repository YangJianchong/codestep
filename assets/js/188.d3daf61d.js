(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{548:function(v,_,t){"use strict";t.r(_);var a=t(25),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("p",[v._v("通信功能的最高层，用户功能的最底层，起承上启下的作用。")]),v._v(" "),t("p",[v._v("运输层有两个协议，分别是用户数据报协议UDP 和传输控制协议 TCP 协议。其中 TCP 较为复杂。UDP 提供不可靠交付，TCP 提供可靠交付。")]),v._v(" "),t("p",[v._v("两个主机间进行通信时，当数据报送到目的地后还需要找到对应的端口，然后将信息传入其中。")]),v._v(" "),t("p",[v._v("端口是逻辑上的概念，端口的由来是因为每一个进程都有一个标识符，但是不同计算机的进程标识符不相同。所以为了统一，外面包装了一层端口，端口与端口实现之间进行通信。")]),v._v(" "),t("p",[v._v("端口号的长度是 16 位。分为两类，分别是服务器端口号和客户端端口号也成为短暂端口号。")]),v._v(" "),t("p",[v._v("服务器端口号：0 - 1023")]),v._v(" "),t("p",[v._v("登记端口号：1024 - 49151 位没有熟知端口号的应用程序使用，为防止重复，使用这个范围内的端口号时需要在 IANA 登记。")]),v._v(" "),t("p",[v._v("客户端口号和短暂端口号数值为 49152 - 65535，留给客户进程选择暂时使用。")]),v._v(" "),t("p",[v._v("当不同的应用进程发送数据时可以使用同一个运输层的协议进程传输数据，也就是复用。")]),v._v(" "),t("p",[v._v("当接收到数据后，接收方在传输层将报文首部数据剥离后能够将数据正确的交付给不同的应用进程，也就是分用。")]),v._v(" "),t("h1",{attrs:{id:"udp-协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp-协议"}},[v._v("#")]),v._v(" UDP 协议")]),v._v(" "),t("p",[v._v("特点：")]),v._v(" "),t("ol",[t("li",[v._v("UDP 在 IP 数据报之上的基础上增加了复用和分用，差错检测功能。")]),v._v(" "),t("li",[v._v("无连接，实时交付。")]),v._v(" "),t("li",[v._v("尽最大努力的交付，也就是不可靠交付。")]),v._v(" "),t("li",[v._v("UDP 协议没有拥塞控制，也就是当网络拥堵时数据发送的速率不会降低，适合多媒体通信的要求。")]),v._v(" "),t("li",[v._v("UDP 支持一对一，一对多，多对一和多对多的交互通信。")]),v._v(" "),t("li",[v._v("UDP 的首部开销小，只有 8 个字节。")]),v._v(" "),t("li",[v._v("UDP 是面向报文的，从应用层拿到的报文不会修改，直接放入 UDP 的数据部分。")])]),v._v(" "),t("p",[v._v("UDP 数据报是由两部分组成，首部和数据部。")]),v._v(" "),t("h1",{attrs:{id:"可靠传输的工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可靠传输的工作原理"}},[v._v("#")]),v._v(" 可靠传输的工作原理")]),v._v(" "),t("h1",{attrs:{id:"tcp-报文段首部格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-报文段首部格式"}},[v._v("#")]),v._v(" TCP 报文段首部格式")]),v._v(" "),t("h1",{attrs:{id:"tcp-可靠传输的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-可靠传输的实现"}},[v._v("#")]),v._v(" TCP 可靠传输的实现")]),v._v(" "),t("h1",{attrs:{id:"tcp-流量控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-流量控制"}},[v._v("#")]),v._v(" TCP 流量控制")]),v._v(" "),t("h1",{attrs:{id:"tcp-的拥塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的拥塞控制"}},[v._v("#")]),v._v(" TCP 的拥塞控制")]),v._v(" "),t("h1",{attrs:{id:"tcp-的拥塞控制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的拥塞控制算法"}},[v._v("#")]),v._v(" TCP 的拥塞控制算法")]),v._v(" "),t("h1",{attrs:{id:"tcp-的运输连接管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的运输连接管理"}},[v._v("#")]),v._v(" TCP 的运输连接管理")]),v._v(" "),t("h2",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[v._v("#")]),v._v(" 作用")]),v._v(" "),t("p",[v._v("提供了进程与进程间的逻辑通信\n复用：不同软件可以使用同一个传输层。\n分用：同一个传输层可以分给不同的软件。")]),v._v(" "),t("ul",[t("li",[v._v("协议\n"),t("ul",[t("li",[v._v("TCP\n"),t("ul",[t("li",[v._v("面向连接的传输控制协议，不提供广播和多播服务。")]),v._v(" "),t("li",[v._v("可靠，面向连接，时延大，适用于大文件。")])])]),v._v(" "),t("li",[v._v("UDP\n"),t("ul",[t("li",[v._v("无连接的用户数据协议。")]),v._v(" "),t("li",[v._v("不可考，无连接，时延小，适用于小文件。")])])])])])]),v._v(" "),t("h2",{attrs:{id:"寻址与端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#寻址与端口"}},[v._v("#")]),v._v(" 寻址与端口")]),v._v(" "),t("ul",[t("li",[v._v("端口\n"),t("ul",[t("li",[v._v("传输层的SAP，唯一标识一个进程。")]),v._v(" "),t("li",[v._v("逻辑端口，和硬件的端口区分开")]),v._v(" "),t("li",[v._v("16bit 65536个")]),v._v(" "),t("li",[v._v("分为服务端和客户端")]),v._v(" "),t("li",[v._v("服务端\n"),t("ul",[t("li",[v._v("熟知端口号：0 ~ 1023 （重要的应用端口）")]),v._v(" "),t("li",[v._v("登记端口号：1024 ~ 49151")])])]),v._v(" "),t("li",[v._v("客户端\n"),t("ul",[t("li",[v._v("动态分配，只有在使用时才会动态分配一个")]),v._v(" "),t("li",[v._v("49512 ~ 65536")])])])])]),v._v(" "),t("li",[v._v("套接字\n"),t("ul",[t("li",[v._v("ip + 端口")]),v._v(" "),t("li",[v._v("唯一的标识的一个主机和它上面的一个进程")])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);