(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{484:function(_,v,t){"use strict";t.r(v);var s=t(25),r=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"第一章-预备知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一章-预备知识"}},[_._v("#")]),_._v(" 第一章 预备知识")]),_._v(" "),t("p",[_._v("C++ 的三大法宝：")]),_._v(" "),t("ol",[t("li",[_._v("继承 C 语言。")]),_._v(" "),t("li",[_._v("支持面向对象。")]),_._v(" "),t("li",[_._v("支持模板特性。")])]),_._v(" "),t("h1",{attrs:{id:"_1-1-c-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-c-简介"}},[_._v("#")]),_._v(" 1.1 C++ 简介")]),_._v(" "),t("p",[_._v("C++ 融合了"),t("strong",[_._v("过程性编程")]),_._v("，"),t("strong",[_._v("面向对象")]),_._v("和"),t("strong",[_._v("泛型编程")]),_._v("三种不同的编程方式。")]),_._v(" "),t("p",[_._v("如果学过 C 语言，再学 C++ 需要摒弃一些编程习惯。反之没有学过 C 语言直接学 C++ 则需要学习 C 语言的知识，需要对 C 语言的知识有较深入的了解。")]),_._v(" "),t("h1",{attrs:{id:"_1-2-c-简史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-c-简史"}},[_._v("#")]),_._v(" 1.2 C++ 简史")]),_._v(" "),t("p",[_._v("了解 C++ 前需要先了解 C 语言。")]),_._v(" "),t("p",[_._v("开发操作系统时需要一种能够直接，简洁，高效且有效控制硬件的语言。")]),_._v(" "),t("p",[_._v("虽然汇编可以直接操作硬件，但是不具备可移植性，也就是说汇编语言针对不同的硬件有特定的实现方式，换台机器就无法运行。")]),_._v(" "),t("p",[_._v("于是开发出了 C 语言。可移植性采用编译器来实现，通过编译器将 C 语言编译成机器码，不同的硬件环境通过编译器不同的编译方式来"),t("strong",[_._v("抹平差异")]),_._v("。实现了同一代码可以在不同的机器上运行。")]),_._v(" "),t("p",[_._v("C 语言的设计理念是"),t("strong",[_._v("过程化编程")]),_._v("，"),t("strong",[_._v("结构化编程")]),_._v("，"),t("strong",[_._v("自顶向下设计")]),_._v("。")]),_._v(" "),t("p",[_._v("虽然结构化编程提高了程序的清晰度，可靠性，且便于维护，但是当程序变得很大的时候，结构化程序就显得无力了。")]),_._v(" "),t("p",[_._v("面向对象编程（OOP）提供了一种新的方法，设计与问题本质特性相对于的"),t("strong",[_._v("数据格式")]),_._v("。本质上都是为了更大程度上的"),t("strong",[_._v("复用代码")]),_._v("。")]),_._v(" "),t("p",[_._v("泛型同样是为了复用代码，采用尽可能少的代码来完成。因为存在很多数据类型，所以泛型的目的则是同一套代码支持不同的数据类型。")]),_._v(" "),t("h1",{attrs:{id:"_1-3-可移植性和标准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-可移植性和标准"}},[_._v("#")]),_._v(" 1.3 可移植性和标准")]),_._v(" "),t("p",[_._v("可移植性指的是程序的可移植性，也就是一套程序可以在不同的机器上运行不出错。")]),_._v(" "),t("p",[_._v("可以从"),t("strong",[_._v("内因")]),_._v("和"),t("strong",[_._v("外因")]),_._v("两个角度来看待"),t("strong",[_._v("可移植性")]),_._v("。")]),_._v(" "),t("p",[_._v("从内因来看，程序是由语言编写出来的，语言存在多个版本，语言的差异也会影响可移植性，不同版本的语言会导致问题产生，所以尽量使用同一版本或者兼容其他版本。")]),_._v(" "),t("p",[_._v("而从外因来看，影响因素则主要是硬件，针对特定的硬件而实现的功能是无法移植的，需要重新修改代码，注意避免这种情况。")]),_._v(" "),t("p",[_._v("常见的 C++ 版本有：")]),_._v(" "),t("ol",[t("li",[_._v("1998 年制定的 C++98 标准。")]),_._v(" "),t("li",[_._v("2003 年制定了 C++2003 标准，但是没有增加新特性，所以本质上还是 C++98 标准。")]),_._v(" "),t("li",[_._v("2011 年制定 C++11 标准，增加了很多新特性，目的是消除不一致。")])]),_._v(" "),t("p",[_._v("ISO C++ 吸收了很多 ANSI C 语言标准，可以认为是 C 语言的超集。")]),_._v(" "),t("p",[_._v("其实 C 语言也借鉴 C++ 增加了其添加的新特性，例如 const，目前最新的 C 标准为 c99 。")]),_._v(" "),t("h1",{attrs:{id:"_1-4-程序创建技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-程序创建技巧"}},[_._v("#")]),_._v(" 1.4 程序创建技巧")]),_._v(" "),t("p",[_._v("编辑，编译，链接，运行。")]),_._v(" "),t("p",[_._v("C++ 的扩展名，也就是文件后缀名为 CPP，即 C plus plus 的缩写。")]),_._v(" "),t("p",[_._v("最初的 C++ 代码是转换为 C 代码，然后编译器再将 C 代码转换为机器码。也称为 cfront，表示 C 前端。")]),_._v(" "),t("p",[_._v("后续随着 C++ 的普及越来越多的编译器实现了直接将其转为机器码，加速了编译过程，同时也强调 C++ 是独立的语言。")])])}),[],!1,null,null,null);v.default=r.exports}}]);