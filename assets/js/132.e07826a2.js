(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{492:function(t,e,o){"use strict";o.r(e);var n=o(25),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"第五章：循环和关系表达式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#第五章：循环和关系表达式"}},[t._v("#")]),t._v(" 第五章：循环和关系表达式")]),t._v(" "),o("p",[t._v("前缀 "),o("code",[t._v("for (int i = 0; i < n; ++i)")]),t._v(" 和后缀 "),o("code",[t._v("for (int i = 0; i < n; i++)")]),t._v(" 的区别？")]),t._v(" "),o("blockquote",[o("p",[t._v("从逻辑上二者并没有任何区别。但是在实际使用中，前缀要比后缀效率更高，原因是前缀直接加一，而后缀需要提前复制保留一个副本然后加一在返回副本。")])]),t._v(" "),o("p",[t._v("注意 ++ 的运算符要高于 * 。")]),t._v(" "),o("blockquote",[o("p",[t._v("例如：x = *pt++ 实际上等价于 x = *(pt++) 。")])]),t._v(" "),o("p",[o("code",[t._v("while(name[i] != '\\0')")]),t._v(" 等价于 "),o("code",[t._v("while(name[i])")]),t._v("。")]),t._v(" "),o("blockquote",[o("p",[t._v("因为 name[i] 存在字符，其编码为非零值或则 true ，所以循环条件成立，反之当遇到空值字符编码值为  0 或 flase，而且后者不用判断速度更快。")])])])}),[],!1,null,null,null);e.default=i.exports}}]);