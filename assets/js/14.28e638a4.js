(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{373:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"贪心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪心"}},[t._v("#")]),t._v(" 贪心")]),t._v(" "),a("p",[t._v("贪心是一种思想，学会了这种思想可以虽然不能让你得到更多的 money 但是它让你游刃有余的处理很多问题，从而得到更多的利益！而利益对于计算机来说就说更高的效率，更低的时空复杂度。")]),t._v(" "),a("p",[t._v("什么是贪心？")]),t._v(" "),a("p",[t._v("贪心就是朝着某个方向不断的优化，不断的前进，最终将某个问题优化到某种程度上达到改问题的最优解。贪心是一种比较简单的思想，选好方向无脑向前即可！那么贪心体现在什么问题上呢？怎么来解决问题的？")]),t._v(" "),a("h2",{attrs:{id:"现实背景-题型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#现实背景-题型"}},[t._v("#")]),t._v(" 现实背景&题型")]),t._v(" "),a("ul",[a("li",[t._v("某一天（24小时），存在很多会议，这些会议的开始结束均不相同，如何安排这些会议使得尽可能多的会议被安排上？这是活动安排问题。")]),t._v(" "),a("li",[t._v("假如有一天你看到了很多不同品种的珍贵植物（可以切割），但是只背了一个书包，你可以随便拿，这个时候你肯定会思考如何在有限的背包中实现利益最大化？这是装载问题。")]),t._v(" "),a("li",[t._v("北京和海南之间存在很多条路（边）和城市（节点），怎么样才可以找到最短的路？这是最短路问题。")]),t._v(" "),a("li",[t._v("要在 北上广深 这几个城市间建立通信网络，如何在最节省经费的前提下建立起来？这是最小生成树问题。")]),t._v(" "),a("li",[t._v("哈夫曼编码问题")])]),t._v(" "),a("p",[t._v("以上的这些问题都蕴含了同一个思想，贪心！那么如何用贪心来解决这些问题？")]),t._v(" "),a("h2",{attrs:{id:"性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性质"}},[t._v("#")]),t._v(" 性质")]),t._v(" "),a("p",[t._v("一般而言贪心具备以下特点，如果具备那么可以用贪心思想来解决。")]),t._v(" "),a("p",[t._v("这些特点分别是"),a("strong",[t._v("贪心选择")]),t._v("，"),a("strong",[t._v("最优子结构")]),t._v("和"),a("strong",[t._v("无后效应")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("贪心选择：")]),t._v(" 首先要选择合适的贪心选择方向，根据选择的方向将问题分解成一个个子问题，然后每一步都是当前的局部最优，步步逼近逐渐达到全局最优。")]),t._v(" "),a("p",[a("strong",[t._v("无后效应：")]),t._v(" 子问题间不会相互影响，因为存在多个子问题，但是解决这些问题的时候只能一步步来，如果解决完前面的问题了但是解决后面的时候又影响到了前面的问题，牵一发而动全身，那么肯定不行。无后效应就是说子问题与子问题间不会相互影响。例如你最近疯狂学习英语，但是没有花时间在数学上面导致的数学成绩的下滑，虽然暂时性的提高了英语成绩，但是显然影响到了数学成绩，所以不具备无后效应。")]),t._v(" "),a("p",[a("strong",[t._v("最优子结构：")]),t._v(" 问题的最优解中包含子问题的最优解，这是定义。例如北京到海南，求最短距离，假设必定经过郑州，那么求北京到海南的最短距离这个大问题就可以分解为从北京到郑州的最短距离加上郑州到海南的最短距离，即通过子问题的最优解就可以推出问题的最优解。")]),t._v(" "),a("p",[a("strong",[t._v("总结：")]),t._v(" 贪心选择的重点是方向也可以理解分解子问题。无后效应的重点是子问题与子问题间是相互不影响的。最优子结构则是通过子问题的最优解可以推出问题的最优解。")]),t._v(" "),a("h2",{attrs:{id:"思考过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考过程"}},[t._v("#")]),t._v(" 思考过程")]),t._v(" "),a("p",[t._v("其实写题的时候很简单：三步即可")]),t._v(" "),a("ul",[a("li",[t._v("输入数据\n"),a("ul",[a("li",[t._v("（如何存储？采用什么数据结构？）")])])]),t._v(" "),a("li",[t._v("确定方向然后排序\n"),a("ul",[a("li",[t._v("（采取什么样的贪心策略？）")])])]),t._v(" "),a("li",[t._v("迭代输出")])]),t._v(" "),a("h1",{attrs:{id:"题型总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题型总结"}},[t._v("#")]),t._v(" 题型总结")]),t._v(" "),a("p",[t._v("贪心的题型主要分为以下几种：活动安排问题，装载问题，最短路，最小生成树，哈夫曼编码。还有很多题目无法归类，但是贪心思想则是蕴含一种，而贪心更是作为一种思想搭建起了算法大厦的基石。")]),t._v(" "),a("h2",{attrs:{id:"_1-0-活动安排问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-活动安排问题"}},[t._v("#")]),t._v(" 1.0 活动安排问题")]),t._v(" "),a("p",[t._v("题目背景：在一段时间内有很多不同的时间长度的会议，这些会议的起始结束时间都不同，如果会议相互冲突的话只能选择其中一个并且一段会议必须是完整不可中断的。求在这一整段时间内可以安排最多数量的会议。")]),t._v(" "),a("p",[t._v("思路：首先选择一个方向，也就是贪心选择，为了保证尽可能多的安排会议，那么肯定需要保证会议时间尽可能的短且结束的早。由此出现三种方向，按照开始时间早的会议进行逐步解决，按照会议时长短进行，按照结束时间早的进行。")]),t._v(" "),a("ul",[a("li",[t._v("若按照会议开始时间作为贪心策略，举一个极端情况，如果一个会议开始时间很早但是持续了一天，显然只能安排这一个会议。其他的会议虽然开始时间晚但是结束的也早，没有安排上，显然浪费了。")]),t._v(" "),a("li",[t._v("若按照会议总时长短的来升序排列，举一个极端情况，如果一个会议总时长非常短，但是在快结束的时候才开始，如果将这个会议放在一个开，前面的时间显然都浪费了并且后面的时间也不够容纳更多的会议了，也不合适。")]),t._v(" "),a("li",[t._v("若按照会议的结束时间作为贪心策略，会议结束快的显然开始也快，而时长也是较短的，显然结合了上述两者的优势。")])]),t._v(" "),a("p",[t._v("所以，按照会议结束时间来排序，如果结束时间相同，开始时间晚的优先，为了不影响前面的会议。排序后再来判断每一个活动参与的情况。")]),t._v(" "),a("h3",{attrs:{id:"coding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coding"}},[t._v("#")]),t._v(" coding")]),t._v(" "),a("p",[t._v("首先思考会议的数据结构，采用一个数组 a 来存储这个会议，每一个会议都有开始结束两个属性。用 s e 来记录会议的开始和结束。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("将数据输入，存入数组中。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("调用库函数 sort 对其进行排序，按照会议结束时间升序排列，如果结束时间相同那么时间晚的优先。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tv a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tv b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("确定起始位置，采用一个变量 t 来记录第一个会议的结束时间，然后下一个会议与之比较，如果时间晚于前一个会议那么就说明可以安排！反之不行，然后迭代记录下来可以安排会议的个数，同时还应当将当前可以安排会议的结束时间在作用到变量 t 上，为了保证下一次比较的是上一次安排的会议的结束时间。最后输出可安排会议的个数即可。注意会议的个数是从 1 开始的，而不是 0 ，因为 第一个会议为了方便起始，已经默认安排上了，循环是从第二个会议开始比较的。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("测试题：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://vjudge.net/problem/HDU-2037",target:"_blank",rel:"noopener noreferrer"}},[t._v("VJ-HDU-2037"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_2-0-装载问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-装载问题"}},[t._v("#")]),t._v(" 2.0 装载问题")]),t._v(" "),a("p",[t._v("背景：你背了一个书包去旅游，发现了一处上古圣地，此处有好多种珍贵植物，不同品种的植物价值不同体积也不同并且植物可以随便切割。有些植物价值高但是体积更大。如何将使用有限的背包装取最大价值的植物回去？")]),t._v(" "),a("p",[t._v("思路：我们的目的是最大化的价值，所以价值高，体积小的最好，也就是价值密度（价值/体积） 这个参数越大越好。所以这就是贪心策略，按照价值密度来降序排列，价值密度大的有限装入背包，然后不断迭代即可！")]),t._v(" "),a("p",[t._v("此处装载的物品可以分割，若不可分则是 0/1 背包，而贪心针对0/1背包问题只能达到局部最优得到近似解，无法得到最优解。这个问题后续会详解。此处记住即可！")]),t._v(" "),a("p",[t._v("按照重量升序，重量升序之后逐个判断装入。")]),t._v(" "),a("h3",{attrs:{id:"coding-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coding-2"}},[t._v("#")]),t._v(" coding")]),t._v(" "),a("ol",[a("li",[t._v("输入数据（如何存储？采用什么数据结构？）")]),t._v(" "),a("li",[t._v("确定方向然后排序（采取什么样的贪心策略？）")]),t._v(" "),a("li",[t._v("迭代输出")])]),t._v(" "),a("p",[t._v("数据结构如下：采用一个数组 a 来存储背包中的物品，其中每一个物品存在三个属性 j / f / h 其中 j 代表 物品价值， f 代表物品体积，而 h 代表物品的价值密度也就是价值除以体积 （j/f） 。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("room")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("输入数据，将 n 个物品存入数组之中。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("选择贪心策略，按照价值密度降序排列")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("room a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" room b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("对物品进行排序，设置一个变量 sum 来记录当前背包中物品的价值。其中 m 是背包的容量，每一次都需要判断这个物品能否装进背包中，如果物品体积太大那么肯定装不下去。反之装下去后 sum 就要计下装进来物品的价值，然后背包的体积减下去，因为这个物品装进去了。一旦物品装不下去，那就按照背包的体积，这个东西能装多少装多少，因为根据贪心策略当前物品是最有价值的。然后输出即可。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("ol",[a("li",[a("p",[a("a",{attrs:{href:"https://vjudge.net/problem/HDU-1009",target:"_blank",rel:"noopener noreferrer"}},[t._v("VJ-HDU-1009"),a("OutboundLink")],1),t._v(" 这道题就是模板题，很简单。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://vjudge.net/problem/HDU-2111",target:"_blank",rel:"noopener noreferrer"}},[t._v("VJ-HDU-2111"),a("OutboundLink")],1),t._v(" 这道题变形了一下，仔细看题，也是模板题。")])])]),t._v(" "),a("h2",{attrs:{id:"_3-0-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-end"}},[t._v("#")]),t._v(" 3.0 end")]),t._v(" "),a("p",[t._v("最小生成树和最短路里面涉及到的部分比较多，放在的图论中总结。")]),t._v(" "),a("p",[t._v("贪心是一个比较简单算法思想，每一步都是最优解然后实现全局最优，但是现实中有很多问题往往会陷入局部最优。就像人生，每一步都选择最好的但最好结果却并不一定达到本应该达到的境界。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ol",[a("li",[t._v("[算法导论]")]),t._v(" "),a("li",[t._v("[趣学算法]")])])])}),[],!1,null,null,null);s.default=r.exports}}]);