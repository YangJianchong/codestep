(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{547:function(v,_,t){"use strict";t.r(_);var a=t(25),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("p",[v._v("应用层是计算机网络的最顶层，也是网络应用所处的层次。网络应用例如： 浏览器网页，邮件，即时通信（qq），等这些应用。")]),v._v(" "),t("p",[v._v("应用层要做的事情是将应用数据根据不同的协议包装好发到传输层，以及将传输层发送过来的数据解析出来在发送给具体的应用程序。也就是包装数据，并且还具备“拆包”")]),v._v(" "),t("p",[v._v("除此之外，这些应用需要在不同的端系统上进行通信，通信时传输数据的要求也不相同。")]),v._v(" "),t("h1",{attrs:{id:"应用层协议原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用层协议原理"}},[v._v("#")]),v._v(" 应用层协议原理")]),v._v(" "),t("p",[v._v("网络应用的核心是能够在不同的端系统中通过网络通信的程序。")]),v._v(" "),t("p",[v._v("应用软件本身存在两种体系结构：客户服务器结构和P2P结构。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("客户服务器结构指端系统分为客户端和服务端，客户端运行在客户主机中，也就是我们日常使用的设备，手机，电脑等都属于客户端。服务端运行在web服务器中。例如网页应用，通过手机（客户端）看到服务器（服务端）发送过来的网页。这种体系结构属于多个客户访问少量服务器，也就是有主次之分，服务器里面存放有应用数据，客户按需来取，想看什么取请求服务器，服务器知道后再发送对应的内容。例如看视频，看一部分发送一部分。")])]),v._v(" "),t("li",[t("p",[v._v("P2P 结构指的是主机和主机之间没有主次之分，有称为对等体系。客户主机既可以是客户端可以是服务端。")])])]),v._v(" "),t("p",[v._v("基于以上两种类型，当写软件之时只需要考虑应用层这一层即可，下面的层次已经都封装好了不要考虑。")]),v._v(" "),t("h2",{attrs:{id:"网络应用的体系结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络应用的体系结构"}},[v._v("#")]),v._v(" 网络应用的体系结构")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("客户-服务器体系")]),v._v(" "),t("ul",[t("li",[v._v("服务器是一直打开的，这样可以保证客户时时刻刻能够打开使用。")]),v._v(" "),t("li",[v._v("客户之间无法直接通信，需要先到达服务器然后再发送给别的客户。")]),v._v(" "),t("li",[v._v("服务器往往不只一台，如果用户多的话一台服务器响应不过来，需要配备多台服务器。")])])]),v._v(" "),t("li",[t("p",[v._v("P2P 体系结构")]),v._v(" "),t("ul",[t("li",[v._v("对于主机有最小的依赖。")]),v._v(" "),t("li",[v._v("应用程序在主机上可以直接通信，主机与主机之间称为对等方，也就是主机既是客户端也是供服务端。")]),v._v(" "),t("li",[v._v("自扩展性，由于本身也可以向其他端系统发送文件，所以也增加了服务能力。不需要庞大的服务器基础设施和带宽。")])])])]),v._v(" "),t("p",[v._v("有些应用程序结合了以上两种体系结构。例如发送消息时，客户端先去服务器上拿到对方的 ip 地址，然后根据 ip 地址采用 P2P 协议两个客户端之间实现通信。")]),v._v(" "),t("h2",{attrs:{id:"进程通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程通信"}},[v._v("#")]),v._v(" 进程通信")]),v._v(" "),t("p",[v._v("程序之间的通信是通过进程实现的。")]),v._v(" "),t("p",[v._v("在一个主机中有多个进程，一个程序也可以有多个进程。")]),v._v(" "),t("p",[v._v("同一台主机上的不同进程间的通信是通过操作系统控制的，这里我们需要考虑的是不同主机上的进程间通信。")]),v._v(" "),t("p",[v._v("进程间的通信内容称为报文，发送进程生产并向网络中发送报文，接收进程接收到报文并通过回送报文进行响应。")]),v._v(" "),t("ol",[t("li",[v._v("客户和服务器进程")])]),v._v(" "),t("p",[v._v("网络应用程序中里面是有多个进程的。进程通过网络相互发送报文。")]),v._v(" "),t("p",[v._v("位于不同端系统上的两个进程进行通信时，通常将一个进程标识为客户，另一个标识为服务器。")]),v._v(" "),t("p",[v._v("二者的区别则是，客户进程是发起通信的一方，而服务器进程是接收通信的一方。")]),v._v(" "),t("p",[v._v("对于 web 而言，浏览器是客户进程，web 服务器则是服务器进程。")]),v._v(" "),t("p",[v._v("对于 P2P 文件共享系统而言，发送方是客户进程，接收方是服务器进程。")]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("进程与计算机网络之间的接口")])]),v._v(" "),t("p",[v._v("进程发送的报文下一步需要放入到"),t("strong",[v._v("套接字")]),v._v("中然后向下进入运输层中。")]),v._v(" "),t("p",[v._v("当然运输层传过来的报文也是通过套接字进入应用层再放入进程中。")]),v._v(" "),t("p",[v._v("而套接字就则是应用层和运输层之间的接口。用于向网络发送报文和从网络接收报文。")]),v._v(" "),t("p",[v._v("开发者可以对于应用端的套接字具有绝对的控制，但是对于运输层的套接字控制仅限于两点：一是选择运输协议，二是设定几个运输层的参数，例如最大缓存和最大报文段长度等。")]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("进程寻址")])]),v._v(" "),t("p",[v._v("运输层中有很多程序，程序中又有很多进程，当套接字拿到从网络接收到的报文后需要知道这个报文是发送给哪一个进程的，也就是需要明确接收进程。这也就是进程寻址。")]),v._v(" "),t("p",[v._v("为了找到接收进程，出现了一个新的慨念，端口号。每一个进程都分配有一个端口号，也就是端口号可以标识一个进程，于是套接字根据端口号就找到了进程。")]),v._v(" "),t("p",[v._v("随着不断发展，用的多了，端口号对应的服务也逐渐默认下来。一般而言 80 端口用来标识 web 服务器")]),v._v(" "),t("p",[v._v("邮件服务器进程用端口号 25 来标识。")]),v._v(" "),t("h2",{attrs:{id:"可供应用程序使用的运输服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可供应用程序使用的运输服务"}},[v._v("#")]),v._v(" 可供应用程序使用的运输服务")]),v._v(" "),t("p",[v._v("发送端的应用程序将报文放入套接字中后，套接字再将数据报提供给运输层。")]),v._v(" "),t("p",[v._v("此时运输层需要考虑相应的运输方式，也就是相应的协议。而不同运输方式对应不同的协议。")]),v._v(" "),t("p",[v._v("就像你要去旅游，坐飞机快但是费钱，做火车慢但是省钱这个道理一样，主要看你的比较侧重哪方面的需求。")]),v._v(" "),t("p",[v._v("运输层在考虑数据的运输方式时有以下四个方面来参考：可靠的数据传输，吞吐量，定时和安全性。")]),v._v(" "),t("ol",[t("li",[v._v("可靠数据传输\n故名思意，运输层可以提供进程到进程间的可靠交付。")])]),v._v(" "),t("p",[v._v("选择这种协议后，发送进程只需要将数据放入套接字中即可，不用考虑数据丢失问题，这种协议保证了数据一定会发送到目的主机上。")]),v._v(" "),t("p",[v._v("如果运输层不提供可靠的交付的话，发送到目的主机上的数据可能存在丢失问题。当然对于有些程序而言丢失一小部分问题不大，例如音频/视频这种丢失后会出现小部分的干扰但是还能接受不致命。")]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("吞吐量")])]),v._v(" "),t("p",[v._v("可用吞吐量就是发送进程和接受进程间的交付比特速率。因为两个进程会话的时候会共享两个网络的带宽资源。")]),v._v(" "),t("p",[v._v("对于吞吐量有要求的数据称为带宽敏感的应用。例如视频，发送超清的视频时如果选择的运输层协议无法提供相应的吞吐量，那么会导致卡顿。")]),v._v(" "),t("p",[v._v("面对卡顿我们可以选择低画质，流畅的视频，这就是弹性应用。当然对于吞吐量而言则是越多越好。")]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("定时")])]),v._v(" "),t("p",[v._v("有些运输层协议可以提供定时保证，也就是对于数据交付的时间有严格的限制，例如电话，游戏画质等不能接受高时延。")]),v._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[v._v("安全性")])]),v._v(" "),t("p",[v._v("运输层协议可以针对数据进行加密。")]),v._v(" "),t("h2",{attrs:{id:"因特网提供的运输服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#因特网提供的运输服务"}},[v._v("#")]),v._v(" 因特网提供的运输服务")]),v._v(" "),t("p",[v._v("因特网为应用程序提供了两个运输层协议，也就是 TCP 和 UDP 协议。")]),v._v(" "),t("ol",[t("li",[v._v("TCP 服务")])]),v._v(" "),t("ul",[t("li",[v._v("面向连接\n"),t("ul",[t("li",[v._v("两个进程在发送数据前先建立连接，也就是握手。此链接是双工的，也就是双方都可以在连接上同时进程报文收发。当应用程序接受后连接就拆除了。")])])]),v._v(" "),t("li",[v._v("提供可靠数据传输\n"),t("ul",[t("li",[v._v("数据传输过程中不出差错，没有字杰的丢失和冗余。接收方能拿到相同的字节流。")])])]),v._v(" "),t("li",[v._v("拥塞控制\n"),t("ul",[t("li",[v._v("当发生方和接受方之间的网络出现拥塞时，TCP 协议会降低发送速率并且限制 TCP 连接，促使达到公平的共享网络带宽的目的。")]),v._v(" "),t("li",[v._v("拥塞控制虽然不能为通信进程带来直接好处，但是能为因特网整体带来好处。")])])])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("UDP 服务")])]),v._v(" "),t("ul",[t("li",[v._v("无连接\n"),t("ul",[t("li",[v._v("也就是通信进程间不提供连接，不存在握手。")])])]),v._v(" "),t("li",[v._v("轻量级的运输协议，仅提供最小服务。")]),v._v(" "),t("li",[v._v("不可靠的数据传输，不保证数据完整送达，丢了就重发。")]),v._v(" "),t("li",[v._v("没有拥塞控制，路堵住了也要冲。")]),v._v(" "),t("li",[v._v("可能是乱序到达。")])]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("因特网运输协议所不提供的服务")])]),v._v(" "),t("p",[v._v("很明显 TCP 和 UDP 协议没有针对吞吐量和定时方面的设定。而安全方面可以用 SSL 来加强弥补。")]),v._v(" "),t("p",[v._v("为了保证定时这一点两种协议都设置成的尽最大努力的交付。虽然实际使用中问题不大，但是二者都是不能保证没问题的。")]),v._v(" "),t("p",[v._v("而在使用因特网电话这种，设计者更愿意使用 UDP 协议，因为没有针对拥塞控制。以及避免了 TCP 的分组开销，重要的是可以容忍一些数据的丢失。")]),v._v(" "),t("p",[v._v("但是许多防火墙都设置成了阻挡 UDP 流量，所以将 TCP 作为备份，一旦通信失败就采用 TCP 协议，")]),v._v(" "),t("h2",{attrs:{id:"应用层协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用层协议"}},[v._v("#")]),v._v(" 应用层协议")]),v._v(" "),t("p",[v._v("应用层协议定义了运行在不同端系统上的应用程序如何传递报文。")]),v._v(" "),t("p",[v._v("主要有以下四个方面：")]),v._v(" "),t("ul",[t("li",[v._v("交换的报文类型。")]),v._v(" "),t("li",[v._v("报文类型的语法。")]),v._v(" "),t("li",[v._v("字段含义。")]),v._v(" "),t("li",[v._v("报文的响应规则。")])]),v._v(" "),t("p",[v._v("应用层协议只是网络应用的一部分。")]),v._v(" "),t("h2",{attrs:{id:"本书涉及的网络应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本书涉及的网络应用"}},[v._v("#")]),v._v(" 本书涉及的网络应用")]),v._v(" "),t("p",[v._v("web 应用对应的应用层协议是 HTTP 协议")]),v._v(" "),t("p",[v._v("电子邮件比较复杂，采用了多个应用层协议，主要使用的是 SMTP 协议")]),v._v(" "),t("p",[v._v("DNS 协议用于域名解析，提供了因特网目录服务。")]),v._v(" "),t("p",[v._v("P2P 文件共享协议")]),v._v(" "),t("h1",{attrs:{id:"web-和-http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-和-http"}},[v._v("#")]),v._v(" Web 和 HTTP")]),v._v(" "),t("p",[v._v("Web 也就是浏览器网页，提供了按需操作。")]),v._v(" "),t("h2",{attrs:{id:"http-概况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-概况"}},[v._v("#")]),v._v(" HTTP 概况")]),v._v(" "),t("p",[v._v("web 的应用层协议是 HTTP 协议，简称超文本传输协议，也就是核心。")]),v._v(" "),t("p",[v._v("在不同的端系统间通过 HTTP 报文来会话，HTTP 则定义了传输报文的格式。")]),v._v(" "),t("p",[v._v("HTTP 使用 TCP 协议运输数据。客户端向套接字中发送的是 HTTP 请求报文，从套接字中接受 HTTP 响应报文。")]),v._v(" "),t("p",[v._v("一旦报文发送给套接字接口就不受客户控制进入 TCP 控制了。")]),v._v(" "),t("p",[v._v("HTTP 协议是无状态协议，不保存关于客户的任何信息，也就是登陆一个网页后仅使用 HTTP 协议再次打开网页就需要重新登陆。")]),v._v(" "),t("h2",{attrs:{id:"非持续连接和持续连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非持续连接和持续连接"}},[v._v("#")]),v._v(" 非持续连接和持续连接")]),v._v(" "),t("p",[v._v("粗略的理解是前者发送一个就断开重新建立连接，后者是发送后不断开继续使用。")]),v._v(" "),t("p",[v._v("HTTP 协议既支持持续连接也支持非持续连接，默认的情况是持续连接，可以改成非持续连接。")]),v._v(" "),t("ol",[t("li",[v._v("非持续连接的 HTTP")])]),v._v(" "),t("p",[v._v("以访问一个网页为例，访问后，先握手建立连接，在客户端上看到页面。然后断开连接。")]),v._v(" "),t("p",[v._v("三次握手的前两次消耗一个往返时间，也就是 RTT 。而总的响应时间就是两个 RTT 时间加上服务器传输 HTML 文件的时间，三次握手的最后一次参与到了指定网页的信息交换中。")]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("采用持续连接的 HTTP")])]),v._v(" "),t("p",[v._v("非持续连接为每一个 HTTP 请求都建立和维护一个全新的连接。这些连接没分配一次都要分配对应的 TCP 缓冲区和保持 TCP 变量。")]),v._v(" "),t("p",[v._v("每一个变量都经受两倍的 RTT 时间，其中一个 RTT 用于建立连接，另一个 RTT 用于请求和接收连接。")]),v._v(" "),t("p",[v._v("基于以上，TCP 连接在接收文件后不会立即断开，而是经过提前设置好的一定的时间间隔。")]),v._v(" "),t("h2",{attrs:{id:"http-报文格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-报文格式"}},[v._v("#")]),v._v(" HTTP 报文格式")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("HTTP 请求报文")])]),v._v(" "),t("li",[t("p",[v._v("HTTP 响应报文")])])]),v._v(" "),t("h2",{attrs:{id:"用户与服务器的交互：cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户与服务器的交互：cookie"}},[v._v("#")]),v._v(" 用户与服务器的交互：cookie")]),v._v(" "),t("p",[v._v("cookie 可用于标识一个用户，记录用户的状态。")]),v._v(" "),t("h2",{attrs:{id:"web-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-缓存"}},[v._v("#")]),v._v(" web 缓存")]),v._v(" "),t("p",[v._v("在客户端和服务器之间加一层代理服务器，也叫做 Web 缓存器。")]),v._v(" "),t("p",[v._v("Http 请求会先发送到 web 缓存器中。发现没有想要的对象后才会重定向到原来服务器中。")]),v._v(" "),t("p",[v._v("举个例子：妈妈买了一堆零食放在了客厅，你在书房写作业，每次想吃时需要先跑到客厅，你觉得很麻烦不想跑来跑去，可是全部拿过来妈妈又不允许。于是将经常吃的零食拿走了一部分，放在了书桌旁的盒子中，一旦想要吃先看看书桌旁的盒子里面有没有。发现没有再去客厅拿。其实在生活中我常常这么干。")]),v._v(" "),t("p",[v._v("客厅就是初始服务器，书桌旁的盒子就是 web 缓存服务器，你就是客户端。")]),v._v(" "),t("p",[v._v("这样做的好处就是大大减少了代理服务器和目的服务器之间的通信量。而且 web 缓存器距离客户端比较近大大提高了速度。")]),v._v(" "),t("h2",{attrs:{id:"条件-get-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件-get-方法"}},[v._v("#")]),v._v(" 条件 GET 方法")]),v._v(" "),t("h1",{attrs:{id:"因特网中的电子邮件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#因特网中的电子邮件"}},[v._v("#")]),v._v(" 因特网中的电子邮件")]),v._v(" "),t("p",[v._v("电子邮件服务在因特网刚刚兴起时就已经非常流行了。")]),v._v(" "),t("p",[v._v("作为异步通信媒体，不需要和别人相互协调，双方什么时候有时间什么时候再处理。")]),v._v(" "),t("p",[v._v("与普通邮件相比，分发速度快，加个便宜，包含的内容丰富。")]),v._v(" "),t("p",[v._v("因特网电子邮件协议主要分为三个部分：用户代理，邮件服务器和简单邮件传输协议。")]),v._v(" "),t("p",[v._v("通信的双方都需要有一个日夜工作的邮件服务器，用于接收管理邮件。")]),v._v(" "),t("p",[v._v("发送流程是用户从代理方发送邮件到自己的邮件服务器中，而自己的邮件服务器会鉴别身份，鉴别后才会放入其中。")]),v._v(" "),t("p",[v._v("邮件服务器再向对方的邮件服务器发送报文，如果对方的服务器出现故障，自己的服务器会建立一个报文队列，然后再次发送邮件知道发送成功为止。当然如果超过一定的期限还不成功的话就删除并以电子邮件的形式通知发送方。")]),v._v(" "),t("p",[v._v("SMTP 是因特网电子邮件协议中主要的应用层协议。采用 TCP 可靠数据传输，同样具有接收双方的邮件服务器。当时本身既是客户端也是服务端，也就是既可以发送也能够接收。")]),v._v(" "),t("h2",{attrs:{id:"smtp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#smtp"}},[v._v("#")]),v._v(" SMTP")]),v._v(" "),t("p",[v._v("由于早期因特网传输信息数量少且体积小，所以 SMTP 采用的是 7 位的 ASCII 码。")]),v._v(" "),t("p",[v._v("但是随之照片，音频媒体等形式的文件出现，ASCII 码已经无法满足。")]),v._v(" "),t("p",[v._v("目前针对这个问题的解决方式是将多媒体的二进制文件编码位 ASCII 码，SMTP 的编码方式不变。发送到目的主机上后再将 ASCII 码转换回来。")]),v._v(" "),t("p",[v._v("SMTP 不使用中间服务器，即使发送端和接收端采用直接通信，即使发送不过去，邮件依旧存在发送端上不断尝试，不会讲邮件发送到中间某个服务器上留存。")]),v._v(" "),t("p",[v._v("SMTP 采用 TCP 协议来运输报文，那么发送前就需要经过三次握手，建立连接。之后再发送报文。如果还有另外的报文要发送这个连接不会断开，再相同的 TCP 连接上继续发送重复处理。然后没有什么可发的了就关闭连接。所以 SMTP 采用的是持续连接。")]),v._v(" "),t("h2",{attrs:{id:"与-http-的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与-http-的对比"}},[v._v("#")]),v._v(" 与 HTTP 的对比")]),v._v(" "),t("ul",[t("li",[v._v("发收形式")])]),v._v(" "),t("p",[v._v("HTTP 是 web 服务器向 web 客户端传送文件。而 SMTP 是邮件服务器向另一个邮件服务器传送文件。二者都采用持续连接。")]),v._v(" "),t("p",[v._v("在使用中 HTTP 是"),t("strong",[v._v("拉协议")]),v._v("，也就是经常从 web 服务器上“拿”东西。而 SMTP 则是"),t("strong",[v._v("推协议")]),v._v("也就是将邮件从发送端服务器推向接收端服务器上。")]),v._v(" "),t("ul",[t("li",[v._v("编码方式")])]),v._v(" "),t("p",[v._v("编码方式有区别，SMTP 是 7 比特的 ASCII 编码而 HTTP 编码方式不受限制。")]),v._v(" "),t("ul",[t("li",[v._v("处理报文的方式")])]),v._v(" "),t("p",[v._v("SMTP 是将邮件的中多个对象包装到一个报文中发送出去。")]),v._v(" "),t("p",[v._v("而 HTTP 将每个对象封装到它自己的 HTTP 响应报文中。")]),v._v(" "),t("h2",{attrs:{id:"邮件报文格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#邮件报文格式"}},[v._v("#")]),v._v(" 邮件报文格式")]),v._v(" "),t("h2",{attrs:{id:"邮件访问协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#邮件访问协议"}},[v._v("#")]),v._v(" 邮件访问协议")]),v._v(" "),t("ol",[t("li",[v._v("POP3\n此协议分为三个过程，特许，事务处理以及更新。")])]),v._v(" "),t("ul",[t("li",[v._v("特许：用户代理发送用户名和密码登陆邮件服务器上，用于鉴别用户身份。")]),v._v(" "),t("li",[v._v("事物处理：用户代理取回报文，同时还可以如下操作，删除报文，取消报文删除标记，通常配置为下载并删除或者下载并保留。获取邮件的统计信息。")]),v._v(" "),t("li",[v._v("跟新：执行第二布的操作，然后结束会话。")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("IMAO")])]),v._v(" "),t("p",[v._v("POP3 没有给用户提供创建远程文件夹并为报文指派文件夹的方法将报文和文件夹相联系。")]),v._v(" "),t("p",[v._v("IMAO 将报文和文件夹相联系，提供相应的功能，使得收件人能够对邮件进行一个统一的管理。")]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("基于 Web 的电子邮件")])]),v._v(" "),t("p",[v._v("使用 HTTP 协议，现如今经常使用的。用户代理就是普通的浏览器了，和远程邮箱之间通过 HTTP 通信。但是发送方的远程邮箱和接收方的远程邮箱之间使用的还是 SMTP/IMAP 协议。")]),v._v(" "),t("h1",{attrs:{id:"dns：因特网的目录服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns：因特网的目录服务"}},[v._v("#")]),v._v(" DNS：因特网的目录服务")]),v._v(" "),t("p",[v._v("域名解析，ip 地址不容易记忆。采用域名，将域名映射到 ip 地址上。")]),v._v(" "),t("p",[v._v("IP 地址由 4 个字节组成。具有严格层次结构，每个字节之间用逗号隔开。标识了 0 - 255 的十进制数字。")]),v._v(" "),t("p",[v._v("IP 地址的层次结构指的是当从左至右扫描 IP 地址时越来越具体的得到 IP 地址位于因特网的何处。")]),v._v(" "),t("p",[v._v("例如快递单，中国-河南-郑州 不断的具体到某地。")]),v._v(" "),t("h2",{attrs:{id:"dns-提供的服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns-提供的服务"}},[v._v("#")]),v._v(" DNS 提供的服务")]),v._v(" "),t("p",[v._v("DNS 提供的服务就是将主机名也就是域名转成成 IP 地址。也就是为因特网提供所谓的目录服务。")]),v._v(" "),t("p",[v._v("举个例子：可以将因特网看出一本书，里面的内容非常丰富。而 DNS 就是目录，根据目录找到对应内容的页码，而页码就是 IP 地址。")]),v._v(" "),t("h2",{attrs:{id:"dns-工作机理概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns-工作机理概述"}},[v._v("#")]),v._v(" DNS 工作机理概述")]),v._v(" "),t("p",[v._v("集中式的 DNS 服务器容易出现很多问题，例如单点故障，通信容量，远距离集中式数据库，维护。对于这些名词下面一一解释。")]),v._v(" "),t("p",[v._v("单点故障：因为只有一个 DNS 服务器，一旦这个服务器崩溃，整个因特网就瘫痪了。")]),v._v(" "),t("p",[v._v("通信容量：单个 DNS 服务器需要处理上亿台主机的 HTTP 请求，所以通信容量会非常大。")]),v._v(" "),t("p",[v._v("远距离的集中式数据库：因为只有一个服务器，所以势必会有距离比较远的主机，而这些主机查询一次耗费的时间会很长，中间可能会经过低速和拥塞的链路会导致严重的时延。")]),v._v(" "),t("p",[v._v("下面则是解决以上的问题所提出的方法：")]),v._v(" "),t("ol",[t("li",[v._v("分布式，层次数据库")])]),v._v(" "),t("p",[v._v("分布式的 DNS 服务器，遍布在全世界，以层次的方式组织起来。将 DNS 服务分成了根 DNS 服务器，顶级域（TLD） DNS 服务器，权威 DNS 服务器。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("根服务器：最初的跟服务只有 13 台，现如今有 400 多个根服务器遍布全球由 13 个组织管理。根服务器提供了 TLD 服务器的 IP 地址，也就是 com/cn/edu/org 等这些域名后缀对应的 IP 地址。")])]),v._v(" "),t("li",[t("p",[v._v("顶级域 DNS 服务器：顶级域以及所有国家的顶级域都拥有 TLD 服务器集群，例如 com 顶级域存放在相应的 TLD 服务器中，由拥有这个顶级域的公司来维护。而 TLD 服务器则提供了权威 DNS 服务器的 IP 地址。")])]),v._v(" "),t("li",[t("p",[v._v("权威 DNS 服务器：提供了将主机名字映射为 IP 地址的服务。")])])]),v._v(" "),t("p",[v._v("以上三种服务器都处于 DNS 服务器的层次结构之中，还存在一种不处于该层级的 DNS 服务器。这种服务器称为本地 DNS 服务器。通常这种服务器距离用户比较近，一般相隔仅有几台路由器。")]),v._v(" "),t("p",[v._v("当用户的主机发送 DNS 请求时首先被本地的 DNS 服务器接收然后再转发到另外三个 DNS 服务器层级中，起代理的角色。")]),v._v(" "),t("p",[v._v("DNS 查询分为"),t("strong",[v._v("迭代查询")]),v._v("和"),t("strong",[v._v("递归查询")]),v._v("两种：")]),v._v(" "),t("ul",[t("li",[v._v("递归查询：请求主机 => 本地 DNS 服务器 => 根服务器DNS 服务器 => TLD DNS 服务器 => 权威 DNS 服务器。 此时拿到了完整的 IP 地址，然后回：权威 DNS 服务器 => TLD DNS 服务器 => 根 DNS 服务器 => 本地 DNS 服务器 => 请求主机。和递归类似，先递推再回溯。")]),v._v(" "),t("li",[v._v("迭代查询：和递归查询不同的是，本地 DNS 服务器去根 DNS 服务器查到后会将地址直接返回到本地服务器上，本地服务器根据这个地址再去 TLD 服务器上查询拿到对应 IP，然后再返回到本地服务器上。本地服务器根据 IP 地址再去权威 DNS 服务器上查询然后拿到完整的 IP 地址返回请求主机。")])]),v._v(" "),t("p",[v._v("而在实际中是迭代查询和递归查询相结合，请求主机和 DNS 服务器之间的查询是递归的，其余查询则是迭代的。")]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("DNS 缓存")])]),v._v(" "),t("p",[v._v("为了减少查询，减少时延优化性能，DNS 每次查询后都会缓存一份查询到的主机和 ip 地址的映射。下次遇到后会查表看看有没有再去做向下的查询。当然由于这张表的空间有限，每过一段时间（一般两天）会丢弃缓存的信息。并且有些域名对应的主机地址不是永久的，所以这些缓存势必要变化。")]),v._v(" "),t("p",[v._v("引入缓存后，除了少数的 DNS 查询以外，就可以绕过根服务器了。")]),v._v(" "),t("h2",{attrs:{id:"dns-记录和报文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns-记录和报文"}},[v._v("#")]),v._v(" DNS 记录和报文")]),v._v(" "),t("p",[v._v("在 DNS 服务器中存储的是资源记录（RR），资源记录（RR）提供了主机名到 IP 地址的映射，每个 DNS 回答包含了一条或多条资源记录（RR）。")]),v._v(" "),t("p",[v._v("资源记录由四部分组成，是一个四元组：(Name,Value,Type,TTL)")]),v._v(" "),t("p",[v._v("TTL: 表示该记录在缓存中的生存时间，时间一到就删除该记录。（另外三个字段和 TTL 无关，所以后面举得例子就不包含 TTL 了）")]),v._v(" "),t("p",[v._v("Type 有 4 种类型的值，根据 Type 的值可以确定 Name/Value 的内容。")]),v._v(" "),t("ul",[t("li",[v._v("当 Type = A 时， Name 是主机名，Value 是主机对应的 IP 地址。\n"),t("ul",[t("li",[v._v("例如：(weijiew.com,185.199.109.153,A)")])])]),v._v(" "),t("li",[v._v("当 Type = NS 时，Name 是一个域，而 Value 则是该域中主机 IP 地址的权威 DNS 服务器的主机名。也就是用于获得下一步的 DNS 查询。\n"),t("ul",[t("li",[v._v("例如：(weijiew.com,blog.weijiew.com,NS) 沿着查询链递进。")])])]),v._v(" "),t("li",[v._v("当 Type = CNAME 时，Name 是主机名，而 Value 是一个别名，通过 Vlaue 这个名字也可以访问 Name 的网站。\n"),t("ul",[t("li",[v._v("例如：(a.weijiew.com,b.weijiew.com,CNAME)")])])]),v._v(" "),t("li",[v._v("当 Type = MX 时，Value 同样是一个别名为 Name 的邮件服务器的规范主机名。MX 可以使得修改邮件服务器主机名。而 CNAME 修改其他服务器名。这样组合可以使得统一命名。也就是统一成一个名字，减少记忆。解析的时候再分开。")])]),v._v(" "),t("p",[v._v("如果 DNS 服务器是权威 DNS 服务器，拿到的记录是 A 记录，用于表示域名及其对应的 IP 地址。")]),v._v(" "),t("p",[v._v("如果 DNS 服务器不是权威 DNS 服务器，拿到的是 NS + A 记录，NS 记录 Value 标识了主机域的名字，而 A 记录标识 NS 记录中 Value 主机域的 IP 地址。")]),v._v(" "),t("p",[v._v("也就是例如 (com,weijiew.com,NS) (weijiew.com,185.199.109.153,A) 连个记录的配合向下推进。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("DNS 报文")])]),v._v(" "),t("li",[t("p",[v._v("在 DNS 数据库中插入记录")])])]),v._v(" "),t("h1",{attrs:{id:"p2p-文件分发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#p2p-文件分发"}},[v._v("#")]),v._v(" P2P 文件分发")]),v._v(" "),t("p",[v._v("P2P 体系对基础设施服务器具有最小依赖甚至没有依赖，因为每一个对等方都能够向其他任何对等发重新分发它已经接收到的该文件的任何部分。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("P2P 体系结构的扩展性")])]),v._v(" "),t("li",[t("p",[v._v("BitTorrent")])])]),v._v(" "),t("h1",{attrs:{id:"视频流和内容分发网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频流和内容分发网"}},[v._v("#")]),v._v(" 视频流和内容分发网")]),v._v(" "),t("p",[v._v("日常使用中我们对于视频的需求已经很大了，针对视频流所提供的服务同样类似于应用层协议中的高速缓存的方式。")]),v._v(" "),t("h2",{attrs:{id:"因特网视频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#因特网视频"}},[v._v("#")]),v._v(" 因特网视频")]),v._v(" "),t("p",[v._v("首先需要了解视频的组成：视频的本质是多个图像，通过恒定的速率展示出来的。而图像是由像素组成，像素由比特编码来展示亮度和颜色。视频的一个重要特点是可以被压缩，因此可以用比特率来权衡视频的质量，比特率指每秒传输的比特数。如今的压缩算法可以将视频压缩成任意比特率，而比特率越高视频越清晰。")]),v._v(" "),t("p",[v._v("传输视频是传输的是比特，传输流式视频最重要的性能度量是平均端到端的吞吐量。")]),v._v(" "),t("p",[v._v("针对视频可以压缩成多个版本，不同版本的质量不同来供用户选择，也就是目前我们看到的 清晰/高清/超清/蓝光 的区别。")]),v._v(" "),t("h2",{attrs:{id:"http-流和-dash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-流和-dash"}},[v._v("#")]),v._v(" HTTP 流和 DASH")]),v._v(" "),t("p",[v._v("站在 HTTP 的角度来看，视频只是其中的一个普通文件。")]),v._v(" "),t("p",[v._v("当客户网络不好时可以降低视频的质量，传输低比特率的视频版本。这种方式称为动态适应流（DASH）")]),v._v(" "),t("p",[v._v("DASH 可以实现客户在不同质量的视频之间自由切换。")]),v._v(" "),t("h2",{attrs:{id:"内容分发网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容分发网"}},[v._v("#")]),v._v(" 内容分发网")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("CND 操作")])]),v._v(" "),t("li",[t("p",[v._v("集群选择策略")])])]),v._v(" "),t("h2",{attrs:{id:"学习案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习案例"}},[v._v("#")]),v._v(" 学习案例")]),v._v(" "),t("h1",{attrs:{id:"套接字编程：生成网络应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#套接字编程：生成网络应用"}},[v._v("#")]),v._v(" 套接字编程：生成网络应用")]),v._v(" "),t("h2",{attrs:{id:"udp-套接字编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp-套接字编程"}},[v._v("#")]),v._v(" UDP 套接字编程")]),v._v(" "),t("ol",[t("li",[v._v("UDPClient")]),v._v(" "),t("li",[v._v("UDPServer")])]),v._v(" "),t("h2",{attrs:{id:"tcp-server-套接字编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-server-套接字编程"}},[v._v("#")]),v._v(" TCP Server 套接字编程")]),v._v(" "),t("h1",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")])])}),[],!1,null,null,null);_.default=s.exports}}]);