(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{368:function(v,_,t){"use strict";t.r(_);var s=t(25),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"第四章：图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四章：图"}},[v._v("#")]),v._v(" 第四章：图")]),v._v(" "),t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("p",[v._v("图可以根据是否"),t("strong",[v._v("有向")]),v._v("和"),t("strong",[v._v("带权")]),v._v("分成以下四种：")]),v._v(" "),t("ul",[t("li",[v._v("无向图    （无向不带权）")]),v._v(" "),t("li",[v._v("有向图    （有向不带权）")]),v._v(" "),t("li",[v._v("加权无向图（无向带权）")]),v._v(" "),t("li",[v._v("加权有向图（有向带权）")])]),v._v(" "),t("h2",{attrs:{id:"无向图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无向图"}},[v._v("#")]),v._v(" 无向图")]),v._v(" "),t("blockquote",[t("p",[v._v("无向图定义： 由一组顶点和一组能够将两个顶点链接在一起的边组成。")])]),v._v(" "),t("p",[v._v("特殊情况下的图： 自环，平行边。")]),v._v(" "),t("p",[v._v("自环：就是自己连自己。")]),v._v(" "),t("p",[v._v("平行边：同一对顶点上有多条边相连。例如就像家和学校两个点之间存在很多条路可以选择，而路与路之间称为平行边。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200718191038.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[v._v("#")]),v._v(" 术语")]),v._v(" "),t("p",[v._v("图论方面存在很多相关术语，为了便于后续的叙述，先将这些术语罗列出来。")]),v._v(" "),t("ul",[t("li",[v._v("相邻：两个顶点和同一条边相连称为相邻。同时也称这条边"),t("strong",[v._v("依附")]),v._v("与这两个顶点。")]),v._v(" "),t("li",[v._v("顶点的度：与该顶点相邻边的个数。")]),v._v(" "),t("li",[v._v("子图：一幅图中所有边的子集以及这些边相关的点所组成的图。")]),v._v(" "),t("li",[v._v("路径：边顺序连接起来的一系列的顶点。")]),v._v(" "),t("li",[v._v("简单路径：没有重复顶点的路径。")]),v._v(" "),t("li",[v._v("环：至少含有一条起点和终点相同的路径。")]),v._v(" "),t("li",[v._v("简单环：不含有重复顶点和边的环。")]),v._v(" "),t("li",[v._v("连通图：任意一个顶点都存在一条路径到达另一个任意顶点。")]),v._v(" "),t("li",[v._v("极大连通子图：非连通图是由若干个连通子图组成，这些连通子图称为极大连通子图。")]),v._v(" "),t("li",[v._v("连通分量：极大连通子图的个数称为非连通图的连通分量。")]),v._v(" "),t("li",[v._v("树：无环"),t("strong",[v._v("连通图")]),v._v("。")]),v._v(" "),t("li",[v._v("森林：互不相连的"),t("strong",[v._v("树")]),v._v("组成"),t("strong",[v._v("森林")]),v._v("。")]),v._v(" "),t("li",[v._v("生成树："),t("strong",[v._v("连通图")]),v._v("的"),t("strong",[v._v("子图")]),v._v("，含有图中的所有"),t("strong",[v._v("顶点")]),v._v("并且还得是一棵"),t("strong",[v._v("树")]),v._v("。")]),v._v(" "),t("li",[v._v("生成森林："),t("strong",[v._v("生成树")]),v._v("的集合，也就是该图的所有"),t("strong",[v._v("连通子图")]),v._v("的"),t("strong",[v._v("生成树")]),v._v("的集合。")]),v._v(" "),t("li",[v._v("稀疏图：被连接的顶点对很少，也就是边比较少的图。")]),v._v(" "),t("li",[v._v("稠密图：大部分的顶点对都有边相连，只有少部分的顶点对之间没有边连接。")]),v._v(" "),t("li",[v._v("二分图：顶点集可以分割成两个互不相交的子集。")])]),v._v(" "),t("h3",{attrs:{id:"无向图的表示方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无向图的表示方法"}},[v._v("#")]),v._v(" 无向图的表示方法")]),v._v(" "),t("p",[v._v("构建无向图需要满足两个条件：")]),v._v(" "),t("ol",[t("li",[v._v("为各种类型的图预留足够的空间。")]),v._v(" "),t("li",[v._v("处理时速度要快。")])]),v._v(" "),t("p",[v._v("存在三种类型的实现方法：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("邻接矩阵，二维的布尔矩阵，两点 i 和 j 之间存在边则对应的下标 [i][j] 中的值为 true ，反之为 false 。当图很大时所需的空间也很大，无法满足第一个条件。")])]),v._v(" "),t("li",[t("p",[v._v("边的数组，实现一个 Edge 类，里面设置两个 int 实例变量。这种实现虽然简洁，但是处理慢，例如如果想要得到某个结点的所有边需要遍历全部结点。")])]),v._v(" "),t("li",[t("p",[v._v("邻接表数组，以顶点为索引，其中的元素都是与该顶点相邻的结点。如图：")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200718192742.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"邻接表的数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#邻接表的数据结构"}},[v._v("#")]),v._v(" 邻接表的数据结构")]),v._v(" "),t("p",[v._v("在非稠密图中就是采用邻接表的数据结构实现的。每个顶点相邻顶点的元素都保存在该顶点对应的元素所指向的一张链表中。")]),v._v(" "),t("p",[v._v("对于 V 个顶点 E 条边的图，使用的空间为 "),t("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[t("mjx-math",{staticClass:" MJX-TEX"},[t("mjx-mi",{staticClass:"mjx-i"},[t("mjx-c",{attrs:{c:"V"}})],1),t("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[t("mjx-c",{attrs:{c:"+"}})],1),t("mjx-mi",{staticClass:"mjx-i",attrs:{space:"3"}},[t("mjx-c",{attrs:{c:"E"}})],1)],1)],1),v._v(" ， 添加一条边所消耗的时间为常数。处理相邻顶点所需的时间也为常数。")],1),v._v(" "),t("h3",{attrs:{id:"深度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[v._v("#")]),v._v(" 深度优先搜索")]),v._v(" "),t("p",[v._v("搜索的本质是遍历全部节点，深搜就是一种遍历方式，如图：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200718194701.png",alt:""}})]),v._v(" "),t("p",[v._v("特点是每次都遍历到"),t("strong",[v._v("尽头")]),v._v("，也就是走不下去的时候回头再遍历相关节点。")]),v._v(" "),t("h3",{attrs:{id:"广度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索"}},[v._v("#")]),v._v(" 广度优先搜索")]),v._v(" "),t("p",[v._v("广搜和深搜相反，优先遍历相关节点，相关节点都遍历完成后再去遍历下一层的节点指导走到尽头。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802184626.png",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"有向图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有向图"}},[v._v("#")]),v._v(" 有向图")]),v._v(" "),t("p",[v._v("有向图的边是单向的，每条边连接的两个顶点都是一个有序对。")]),v._v(" "),t("p",[t("strong",[v._v("背景：")]),v._v(" 有向图的背景有很多，简单枚举几个，有一个大致的体会。")]),v._v(" "),t("ol",[t("li",[v._v("食物链物种的间的不是关系是单向的。")]),v._v(" "),t("li",[v._v("网页之间的超链接，往往有去无回。")]),v._v(" "),t("li",[v._v("程序间的模块间的外部引用。")])]),v._v(" "),t("p",[v._v("有向图有顶点和有方向的边组成。")]),v._v(" "),t("p",[v._v("有向图中的"),t("strong",[v._v("度")]),v._v("分为"),t("strong",[v._v("出度")]),v._v("和"),t("strong",[v._v("入度")]),v._v("两种类型。出度为该"),t("strong",[v._v("顶点指出")]),v._v("的边的总数，入度则为"),t("strong",[v._v("指向该顶点")]),v._v("的边的总数。")]),v._v(" "),t("p",[v._v("在一条有向边中，第一个顶点称为"),t("strong",[v._v("头")]),v._v("，而第二个顶点则称为"),t("strong",[v._v("尾")]),v._v("。")]),v._v(" "),t("p",[v._v("多点可达性可以应用于"),t("strong",[v._v("垃圾回收")]),v._v("，顶点代表对象，而顶点之间的边代表对象与对象之间的"),t("strong",[v._v("引用")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"最小生成树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树"}},[v._v("#")]),v._v(" 最小生成树")]),v._v(" "),t("p",[v._v("生成树表示含有所有顶点的无环连通子图。")]),v._v(" "),t("p",[v._v("而最小生成树表示在生成树的基础上权重最小。")]),v._v(" "),t("p",[v._v("最小生成树只考虑连通图。")]),v._v(" "),t("p",[v._v("边的权重不一定表示距离。")]),v._v(" "),t("h3",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[v._v("#")]),v._v(" 原理")]),v._v(" "),t("ul",[t("li",[v._v("用一条边连接树中任意两个顶点都会产生一个新的环。")]),v._v(" "),t("li",[v._v("从树中删去一条边将会得到两颗独立的树。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802185732.png",alt:""}})]),v._v(" "),t("p",[v._v("切分定理：指将图中"),t("strong",[v._v("所有顶点")]),v._v("分为"),t("strong",[v._v("两个非空且不重叠")]),v._v("的两个集合，"),t("strong",[v._v("横切边")]),v._v("是一条连接两个属于不同集合的顶点的边。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802190023.png",alt:""}})]),v._v(" "),t("p",[v._v("从横切边中找权重最小的边，这条边一定属于最小生成树中。依次不断寻找权重最小的横切边即可。")]),v._v(" "),t("h3",{attrs:{id:"prim-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prim-算法"}},[v._v("#")]),v._v(" Prim 算法")]),v._v(" "),t("p",[v._v("N 个顶点的图中，需要添加 N-1 条边才能构成最小生成树。")]),v._v(" "),t("p",[v._v("对于 prim 算法而言，每次都需要选择一条最小的横切边加入树中。")]),v._v(" "),t("p",[v._v("prim 算法也分为即使实现和延时实现，前者表示一条边的两个顶点都存在于树中的话将会立即删除，反之则不删除等待后续检查边的有效性。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802193314.png",alt:""}})]),v._v(" "),t("p",[v._v("延时实现的遍历顺序为：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802193352.png",alt:""}})]),v._v(" "),t("p",[v._v("即时实现的遍历顺序为：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802193541.png",alt:""}})]),v._v(" "),t("p",[v._v("二者的区别在于即使实现会将某些边从优先队列中删去，这些边是新加入树中顶点与其他已经在书中顶点的所有边。")]),v._v(" "),t("h3",{attrs:{id:"kruskal-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kruskal-算法"}},[v._v("#")]),v._v(" Kruskal 算法")]),v._v(" "),t("p",[v._v("这个算法比较简单，将所有的边按照权重排序，依次放入图中即可，注意要将不满足条件的边剔除，例如闭环。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/weijiew/pic/raw/master/img/20200802193642.png",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"最短路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最短路径"}},[v._v("#")]),v._v(" 最短路径")]),v._v(" "),t("p",[v._v("最短路径的现实背景就是两地之间存在多条路线，选择一条长度最短的路径。")]),v._v(" "),t("p",[v._v("单点最短路径：在加权有向图中，从顶点 s 到顶点 t 的最短路径是所有从 s 到 t 的路径中的权重最小者。")]),v._v(" "),t("h3",{attrs:{id:"最短路径性质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最短路径性质"}},[v._v("#")]),v._v(" 最短路径性质")]),v._v(" "),t("p",[v._v("最短路径的定义：")]),v._v(" "),t("ul",[t("li",[v._v("路径是有向的。")]),v._v(" "),t("li",[v._v("权重不等价于距离。")]),v._v(" "),t("li",[v._v("并不是所有的顶点都是可达的。")]),v._v(" "),t("li",[v._v("负权重会使问题更复杂。")]),v._v(" "),t("li",[v._v("最短路径一般都是简单的。（忽略环）")]),v._v(" "),t("li",[v._v("最短路径不一定是唯一的。")]),v._v(" "),t("li",[v._v("可能存在平行边和自环。")])]),v._v(" "),t("p",[v._v("注意，最短路径树和最小生成树不同，最短路径树是指从指定顶点出发，计算该顶点到达其他所有顶点的最短路径所构成的树。")]),v._v(" "),t("h3",{attrs:{id:"dijkstra"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra"}},[v._v("#")]),v._v(" Dijkstra")]),v._v(" "),t("p",[v._v("Dijkstra 用于处理权重非负的最短路径问题。")]),v._v(" "),t("p",[v._v("Prim 算法每次拿到的都是权值最小的横切边，而 Dijkstra 算法选择横切边是按照距离起点最近的距离来选择，也就是哪个顶点距离起点最近就选择该顶点相关的横切边。")])])}),[],!1,null,null,null);_.default=a.exports}}]);