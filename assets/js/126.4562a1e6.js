(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{485:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第十章：对象和类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十章：对象和类"}},[t._v("#")]),t._v(" 第十章：对象和类")]),t._v(" "),a("p",[t._v("类对象的默认访问控制是 private，可以不用显示声明。")]),t._v(" "),a("p",[t._v("共有部分构成了设计的抽象部分，也就是接口。")]),t._v(" "),a("p",[t._v("类设计要尽可能的将公有接口和实现细节分开。")]),t._v(" "),a("p",[t._v("类声明中可以提供完整的函数定义，也就是编写完整的函数，但是通常单独来写。")]),t._v(" "),a("h2",{attrs:{id:"函数原型，函数声明，函数定义三者之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数原型，函数声明，函数定义三者之间的关系"}},[t._v("#")]),t._v(" 函数原型，函数声明，函数定义三者之间的关系")]),t._v(" "),a("p",[a("strong",[t._v("函数原型")]),t._v("指函数签名，函数名，返回类型和访问修饰符。函数签名指确定的"),a("strong",[t._v("参数数量")]),t._v("及其"),a("strong",[t._v("类型")]),t._v("。注意参数名可选，也就是可以不写形参名。")]),t._v(" "),a("blockquote",[a("p",[t._v("例如："),a("code",[t._v("void Sum(int a,int b);")]),t._v(" 或 "),a("code",[t._v("void Sum(int, int);")]),t._v("  两种类型的函数原型。")])]),t._v(" "),a("p",[a("strong",[t._v("函数声明")]),t._v("的内容和"),a("strong",[t._v("函数原型")]),t._v("一致，也就是说是通过函数原型来进行函数声明的。下面则是摘录 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki"),a("OutboundLink")],1),t._v(" 上的一段话。")]),t._v(" "),a("blockquote",[a("p",[t._v("函数原型（英语：Function prototype）或函数接口（英语：Function interface）是用于指定函数的名称和类型特征（元数，参数的数据类型和返回值类型）的一种"),a("strong",[t._v("省略了函数体")]),t._v("的函数声明")])]),t._v(" "),a("p",[a("strong",[t._v("函数定义")]),t._v("指完整的函数，也就是函数体加上函数原型。下面就是一个完整的函数定义。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("函数声明只是告诉编译器该函数的存在，"),a("strong",[t._v("不分配空间")]),t._v("，直到调用该函数时才分配。而如果函数写在 main 函数之上时可以不写函数声明直接写完整的函数。")]),t._v(" "),a("h2",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[t._v("在使用对象时往往需要设置相应的属性对应的数据，但是一般这些数据是私有的，所以无法公开访问只能通过共有的成员函数来设置。")]),t._v(" "),a("p",[t._v("而构造函数就是提供这些功能的，实现了对象数据的"),a("strong",[t._v("绑定")]),t._v("。当声明程序时会自动调用构造函数，不需要设置相应的成员函数，再调用。")]),t._v(" "),a("p",[t._v("构造函数的参数不少类成员，而是赋给类成员的值，注意区分命名。一般有两种区别方式：")]),t._v(" "),a("p",[t._v("对于成员名 a ，一般在尾部加上下划线（_）。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("或者在头部加上 (m_)")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#析构函数"}},[t._v("#")]),t._v(" 析构函数")]),t._v(" "),a("p",[t._v("构造出来的对象是有生命周期的，生命周期结束后会执行"),a("strong",[t._v("析构函数")]),t._v("来收尾。")]),t._v(" "),a("p",[t._v("编译器决定了什么时候调用析构函数。如果没有提供析构函数编译器会隐式地声明一个默认的析构函数，在对象被删除的代码后执行。")]),t._v(" "),a("p",[t._v("构造函数和析构函数是用来管理类对象的创建和删除。")])])}),[],!1,null,null,null);s.default=r.exports}}]);