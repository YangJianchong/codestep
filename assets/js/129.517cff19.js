(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{488:function(s,t,a){"use strict";a.r(t);var n=a(25),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第二章：开始学习c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章：开始学习c"}},[s._v("#")]),s._v(" 第二章：开始学习C++")]),s._v(" "),a("h1",{attrs:{id:"进入-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入-c"}},[s._v("#")]),s._v(" 进入 C++")]),s._v(" "),a("p",[s._v("C++ 对大小写敏感，注意区分大小写。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 预处理器编译指令")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数头")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译指令")]),s._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Come up and C++ me some time."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You won\'t regret it!"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表示结束 main() 函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数体用 {} 括起来")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("如果运行时窗口自动关闭，可以在 return 之前添加 "),a("code",[s._v("cin.get();")]),s._v(" 语句。")]),s._v(" "),a("p",[s._v("cin/cout 是 C++ 的输入输出工具。")]),s._v(" "),a("p",[s._v("程序的主体结构如下：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    statements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("第一行是"),a("strong",[s._v("函数头")]),s._v("，花括号中包含的部分为"),a("strong",[s._v("函数体")]),s._v("，而 main 则是"),a("strong",[s._v("函数名")]),s._v("。")]),s._v(" "),a("p",[s._v("函数头对函数的功能和其他部分之间的接口做了总结。")]),s._v(" "),a("p",[s._v("函数体则是具体的指令，每条指令都以分号（;） 结尾。")]),s._v(" "),a("p",[s._v("而最后的语句则称为返回语句，表示结束该函数。")]),s._v(" "),a("p",[s._v("函数头中圆括号内部称为"),a("strong",[s._v("形参列表")]),s._v("或"),a("strong",[s._v("参数列表")]),s._v("，外部调用时可以通过参数将数据传入函数内部。")]),s._v(" "),a("p",[s._v("函数头通常作为接口，方便被调用。")]),s._v(" "),a("p",[s._v("main() 函数不被其他函数调用的，而是被"),a("strong",[s._v("启动代码")]),s._v("调用。")]),s._v(" "),a("p",[s._v("编译器将"),a("strong",[s._v("启动代码")]),s._v("添加到程序中使得操作系统可以通过启动代码来"),a("strong",[s._v("调用")]),s._v(" main() 函数。")]),s._v(" "),a("p",[s._v("可以将启动代码理解为"),a("strong",[s._v("程序")]),s._v("和"),a("strong",[s._v("操作系统")]),s._v("之间的"),a("strong",[s._v("桥梁")]),s._v("，main() 函数为操作系统提供了接口。")]),s._v(" "),a("p",[s._v("main() 函数在历史上存在多种风格。")]),s._v(" "),a("p",[s._v("最初经典的 C 函数头为 :")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为在 C 语言中省略返回值类型就默认函数类型为 int ，所以可以这样写。")]),s._v(" "),a("p",[s._v("后续 C++ 淘汰了之上的写法，改为了如下的写法：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("void 表示函数不接受任何参数。")]),s._v(" "),a("p",[s._v("在 C++ 中 "),a("code",[s._v("int main()")]),s._v(" 等效于 "),a("code",[s._v("int main(void)")]),s._v(" 但是在 C 中二者不等效，前者表示对于是否接受参数保持"),a("strong",[s._v("沉默")]),s._v("，而后者则明确表示不接受参数。")]),s._v(" "),a("p",[s._v("下面写法也可以在多种操作系统上运行，但是不是标准格式，应避免使用。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("有人认为 "),a("code",[s._v("return 0")]),s._v(" 繁琐，制定 ANSI/ISO C++ 标准时对此做出了让步，允许最后不写 "),a("code",[s._v("return 0")]),s._v("，但是仅限于 "),a("code",[s._v("main()")]),s._v(" 函数，其他函数不允许。")]),s._v(" "),a("p",[s._v("常规下，程序运行必须通过 "),a("code",[s._v("main()")]),s._v(" 函数开始，如果没有的话程序将不完整编译器，最终导致报错，但是也存在例外情况。")]),s._v(" "),a("p",[s._v("单行注释以 // 开头，一直到行尾都是注释部分，不允许跨行。这也是 C++ 风格的注释方式。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注释")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("多行注释以 /* 开头，直到 */ 结束，中间部分均为注释，可以跨行。这也是 C 风格的注释方式。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n*注释\n*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("虽然 C99 标准也支持 // 注释，但是应该尽量使用 C++ 风格，因为这样不涉及到开始和结束符号的正确配对。")]),s._v(" "),a("p",[s._v("以 # 开头的都是"),a("strong",[s._v("编译指令")]),s._v("，"),a("strong",[s._v("预处理器")]),s._v("会来处理这些编译指令，下面的编译指令可以理解为将 iostream 文件中的代码在源代码编译之前替换到此处，编写的代码和该文件形成复合文件。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为程序要和外部通信，例如从键盘输入字符，字符进入程序之中都是由该部分实现的。这种文件因为在程序的头部也称为"),a("strong",[s._v("头文件")]),s._v("。")]),s._v(" "),a("p",[s._v("io 可以理解为 input/output 即输入输出，C++ 的输入输出存在多种实现方式，例如 cin/cout 。")]),s._v(" "),a("p",[s._v("C 的头文件风格是 .h 为后缀，例如 "),a("code",[s._v("math.h")]),s._v("。")]),s._v(" "),a("p",[s._v("C++ 虽然支持 C 风格的头文件，但是自己也做出了一些修改，对于自己的头文件没有后缀名，对于 C 的头文件支持将后缀去掉，开头加上 c 。如 "),a("code",[s._v("math.h")]),s._v(" 改为 "),a("code",[s._v("cmath")]),s._v("。")]),s._v(" "),a("p",[s._v("这种修改不仅仅是格式上的改变，没有 .h 的头文件可以包含"),a("strong",[s._v("名称空间")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("using namespace std;")]),s._v(" 这是一条 using 编译指令，实现了 std 的名称空间。")]),s._v(" "),a("p",[s._v("名称空间是 C++ 的特性之一，目的是方便"),a("strong",[s._v("组合代码")]),s._v("和"),a("strong",[s._v("组织程序")]),s._v("。缺点则是不同模块间存在"),a("strong",[s._v("命名冲突")]),s._v("，也就两个模块中存在相同命名的函数从而导致执行出错。")]),s._v(" "),a("p",[s._v("解决命名冲突的方式就将该模块的名称作为"),a("strong",[s._v("前缀")]),s._v("加上去，因为模块名是不同的。")]),s._v(" "),a("p",[s._v("例如两个模块 A，B 中都存在名称为 c 的函数，那么直接使用 c 函数会使得运行时矛盾，所以将其改为如下方式即可：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("双冒号是访问的意思（::）。")]),s._v(" "),a("p",[s._v("而对于 cin/cout 而言的全称就是 "),a("code",[s._v('std::cout<< "";')]),s._v(" / "),a("code",[s._v('std::cin>>"";')])]),s._v(" "),a("p",[s._v("因为 "),a("code",[s._v("using namespace std;")]),s._v(" 的提前声明，所以可以省略 std 直接使用 "),a("code",[s._v('cout << ""')]),s._v("/"),a("code",[s._v('cin >> " "')]),s._v("。")]),s._v(" "),a("p",[s._v("输出语句："),a("code",[s._v("cout << endl")])]),s._v(" "),a("p",[s._v("其中 "),a("code",[s._v("<<")]),s._v(" 运算符其实也是左移运算符，此处作为输出其实是运算符重载，也就是在此处使其变成了别的含义而非左移位。同理 "),a("code",[s._v(">>")]),s._v(" 也是。")]),s._v(" "),a("p",[s._v("endl 是换行的意思，也位于 std 名称空间中。")]),s._v(" "),a("p",[s._v("C++ 也支持 C 的换行方式，"),a("code",[s._v("\\n")]),s._v(" 。")]),s._v(" "),a("h1",{attrs:{id:"c-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-语句"}},[s._v("#")]),s._v(" C++ 语句")]),s._v(" "),a("p",[a("code",[s._v("int c;")]),s._v(" 是声明一个整型变量的意思，可以将其理解为一个“盒子”，这个"),a("strong",[s._v("盒子")]),s._v("只能存放整数，例如 1，2，3，反之 1.4 就不可以了，是浮点型。")]),s._v(" "),a("p",[s._v("而 c 就是“盒子”的名称，"),a("code",[s._v("c=1")]),s._v(" 表示将赋值，也就是将整数 1 放入“盒子”中。")]),s._v(" "),a("p",[a("code",[s._v("cin >> c")]),s._v(" 表示输入一个的内容存入变量 c 中。")]),s._v(" "),a("h1",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("C++ 的函数分为有返回值和没有返回值两种类型。")])])}),[],!1,null,null,null);t.default=e.exports}}]);